/* tslint:disable */
/* eslint-disable */
/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvatarOutput,
  ErrorOutput,
} from '../models';
import {
    AvatarOutputFromJSON,
    AvatarOutputToJSON,
    ErrorOutputFromJSON,
    ErrorOutputToJSON,
} from '../models';

export interface DeleteUserAvatarRequest {
    avatarId: string;
}

export interface ListUserAvatarsRequest {
    onset?: number;
    length?: number;
}

export interface UploadUserAvatarRequest {
    file: Blob;
}

/**
 * 
 */
export class AvatarsApi extends runtime.BaseAPI {

    /**
     * Delete an avatar for the connected user
     */
    async deleteUserAvatarRaw(requestParameters: DeleteUserAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.avatarId === null || requestParameters.avatarId === undefined) {
            throw new runtime.RequiredError('avatarId','Required parameter requestParameters.avatarId was null or undefined when calling deleteUserAvatar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/avatars/{avatar_id}`.replace(`{${"avatar_id"}}`, encodeURIComponent(String(requestParameters.avatarId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an avatar for the connected user
     */
    async deleteUserAvatar(requestParameters: DeleteUserAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserAvatarRaw(requestParameters, initOverrides);
    }

    /**
     * List the users avatar
     */
    async listUserAvatarsRaw(requestParameters: ListUserAvatarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AvatarOutput>>> {
        const queryParameters: any = {};

        if (requestParameters.onset !== undefined) {
            queryParameters['onset'] = requestParameters.onset;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/avatars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvatarOutputFromJSON));
    }

    /**
     * List the users avatar
     */
    async listUserAvatars(requestParameters: ListUserAvatarsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AvatarOutput>> {
        const response = await this.listUserAvatarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload an avatar for the connected user
     */
    async uploadUserAvatarRaw(requestParameters: UploadUserAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarOutput>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadUserAvatar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/users/me/avatars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarOutputFromJSON(jsonValue));
    }

    /**
     * Upload an avatar for the connected user
     */
    async uploadUserAvatar(requestParameters: UploadUserAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarOutput> {
        const response = await this.uploadUserAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
