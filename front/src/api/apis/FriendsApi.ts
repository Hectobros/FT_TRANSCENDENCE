/* tslint:disable */
/* eslint-disable */
/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorOutput,
  UserOutput,
} from '../models';
import {
    ErrorOutputFromJSON,
    ErrorOutputToJSON,
    UserOutputFromJSON,
    UserOutputToJSON,
} from '../models';

export interface CreateFriendshipRequest {
    login: string;
}

export interface DeleteFriendshipRequest {
    login: string;
}

export interface ListUsersFriendsRequest {
    onset?: number;
    length?: number;
    search?: string;
}

/**
 * 
 */
export class FriendsApi extends runtime.BaseAPI {

    /**
     * Add a user to the friends list of the connected user
     */
    async createFriendshipRaw(requestParameters: CreateFriendshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction):  Promise<runtime.ApiResponse<UserOutput>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling createFriendship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/friends/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutputFromJSON(jsonValue));
    }

    /**
     * Add a user to the friends list of the connected user
     */
    async createFriendship(requestParameters: CreateFriendshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOutput> {

        const response = await this.createFriendshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user to the friends list of the connected user
     */
    async deleteFriendshipRaw(requestParameters: DeleteFriendshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling deleteFriendship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/friends/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user to the friends list of the connected user
     */
    async deleteFriendship(requestParameters: DeleteFriendshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFriendshipRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the list of friends of the connected user
     */
    async listUsersFriendsRaw(requestParameters: ListUsersFriendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserOutput>>> {
        const queryParameters: any = {};

        if (requestParameters.onset !== undefined) {
            queryParameters['onset'] = requestParameters.onset;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/friends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserOutputFromJSON));
    }

    /**
     * Retrieve the list of friends of the connected user
     */
    async listUsersFriends(requestParameters: ListUsersFriendsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserOutput>> {
        const response = await this.listUsersFriendsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
