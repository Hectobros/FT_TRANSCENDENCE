/* tslint:disable */
/* eslint-disable */
/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorOutput,
  UserOutput,
  UserPartialUpdateRequest,
} from '../models';
import {
    ErrorOutputFromJSON,
    ErrorOutputToJSON,
    UserOutputFromJSON,
    UserOutputToJSON,
    UserPartialUpdateRequestFromJSON,
    UserPartialUpdateRequestToJSON,
} from '../models';

export interface GetUserByIDRequest {
    login: string;
}

export interface ListUsersRequest {
    onset?: number;
    length?: number;
    search?: string;
}

export interface UserPartialUpdateOperationRequest {
    userPartialUpdateRequest?: UserPartialUpdateRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create one user
     */
    async createUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutputFromJSON(jsonValue));
    }

    /**
     * Create one user
     */
    async createUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOutput> {
        const response = await this.createUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete the connected user
     */
    async deleteUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the connected user
     */
    async deleteUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(initOverrides);
    }

    /**
     * Get details information on one user
     */
    async getUserByIDRaw(requestParameters: GetUserByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOutput>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling getUserByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutputFromJSON(jsonValue));
    }

    /**
     * Get details information on one user
     */
    async getUserByID(requestParameters: GetUserByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOutput> {
        const response = await this.getUserByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details information about the connected user
     */
    async getUserMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutputFromJSON(jsonValue));
    }

    /**
     * Get details information about the connected user
     */
    async getUserMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOutput> {
        const response = await this.getUserMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of users
     * List users
     */
    async listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserOutput>>> {
        const queryParameters: any = {};

        if (requestParameters.onset !== undefined) {
            queryParameters['onset'] = requestParameters.onset;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserOutputFromJSON));
    }

    /**
     * Get a list of users
     * List users
     */
    async listUsers(requestParameters: ListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserOutput>> {
        const response = await this.listUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partial update of the connected user
     */
    async userPartialUpdateRaw(requestParameters: UserPartialUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPartialUpdateRequestToJSON(requestParameters.userPartialUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutputFromJSON(jsonValue));
    }

    /**
     * Partial update of the connected user
     */
    async userPartialUpdate(requestParameters: UserPartialUpdateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOutput> {
        const response = await this.userPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
