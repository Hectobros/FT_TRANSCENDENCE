/* tslint:disable */
/* eslint-disable */
/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AvatarOutput } from './AvatarOutput';
import {
    AvatarOutputFromJSON,
    AvatarOutputFromJSONTyped,
    AvatarOutputToJSON,
} from './AvatarOutput';
import type { UserStatsOutput } from './UserStatsOutput';
import {
    UserStatsOutputFromJSON,
    UserStatsOutputFromJSONTyped,
    UserStatsOutputToJSON,
} from './UserStatsOutput';

/**
 * 
 * @export
 * @interface UserOutput
 */
export interface UserOutput {
    /**
     * 
     * @type {string}
     * @memberof UserOutput
     */
    login: string;
    /**
     * 
     * @type {AvatarOutput}
     * @memberof UserOutput
     */
    actualAvatar: AvatarOutput;
    /**
     * 
     * @type {string}
     * @memberof UserOutput
     */
    username: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserOutput
     */
    twoFa: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserOutput
     */
    status: UserOutputStatusEnum;
    /**
     * 
     * @type {UserStatsOutput}
     * @memberof UserOutput
     */
    stats: UserStatsOutput;
}


/**
 * @export
 */
export const UserOutputStatusEnum = {
    Online: 'online',
    Offline: 'offline',
    InGame: 'in_game',
    InQueue: 'in_queue',
    Afk: 'afk'
} as const;
export type UserOutputStatusEnum = typeof UserOutputStatusEnum[keyof typeof UserOutputStatusEnum];


/**
 * Check if a given object implements the UserOutput interface.
 */
export function instanceOfUserOutput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "login" in value;
    isInstance = isInstance && "actualAvatar" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "twoFa" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "stats" in value;

    return isInstance;
}

export function UserOutputFromJSON(json: any): UserOutput {
    return UserOutputFromJSONTyped(json, false);
}

export function UserOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserOutput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'login': json['login'],
        'actualAvatar': AvatarOutputFromJSON(json['actual_avatar']),
        'username': json['username'],
        'twoFa': json['twoFa'],
        'status': json['status'],
        'stats': UserStatsOutputFromJSON(json['stats']),
    };
}

export function UserOutputToJSON(value?: UserOutput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'login': value.login,
        'actual_avatar': AvatarOutputToJSON(value.actualAvatar),
        'username': value.username,
        'twoFa': value.twoFa,
        'status': value.status,
        'stats': UserStatsOutputToJSON(value.stats),
    };
}

